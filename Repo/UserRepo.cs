using LearningManagement.DBConnection;
using LearningManagement.Model;
using LearningManagement.IRepo;
using Microsoft.EntityFrameworkCore;
using LearningManagement.DBConfig;
using Npgsql;

namespace LearningManagement.Repo;

public class UserRepo : IUserRepo
{
    public User? GetUserByEmailPass(string email, string password, DBContextConfig context)
    {
        var user = context.Users
                          .Include(u => u.Role)
                          .Where(u => u.Email == email && EF.Functions.Like(u.Password, password))
                          .Select(u => new User
                          {
                              Id = u.Id,
                              Email = u.Email,
                              Password = u.Password,
                              Fullname = u.Fullname,
                              Role = new Role
                              {
                                  Id = u.Role.Id,
                                  RoleCode = u.Role.RoleCode
                              }
                          })
                          .FirstOrDefault();

        return user;
    }

    //public User GetUserByEmailPass(string email, string password)
    //{
    //    User user = null;
    //    const string query = "SELECT * FROM t_user JOIN t_role role ON role.id = t_user.user_role " +
    //                 "WHERE email = @email AND CAST(pwd AS VARCHAR) = @password";

    //    using (NpgsqlConnection connection = new NpgsqlConnection(ConnectionDB.ConnectionString))
    //    {
    //        connection.Open();
    //        using (NpgsqlCommand command = new NpgsqlCommand(query, connection))
    //        {
    //            command.Parameters.AddWithValue("@email", email);
    //            command.Parameters.AddWithValue("@password", password);

    //            using (NpgsqlDataReader reader = command.ExecuteReader())
    //            {
    //                if (reader.Read())
    //                {
    //                    user = new User()
    //                    {
    //                        Id = (int)reader["id"],
    //                        Email = (string)reader["email"],
    //                        Password = (string)reader["pwd"],
    //                        Fullname = (string)reader["fullname"],
    //                        Role = new Role()
    //                        {
    //                            Id = (int)reader["user_role"],
    //                            RoleCode = (string)reader["role_code"]
    //                        }
    //                    };
    //                }
    //            }
    //        }
    //    }

    //    return user;
    //}

    public int GetRoleIdByRoleCode(string roleCode, DBContextConfig context)
    {

        var role = context.Roles
            .FirstOrDefault(r => r.RoleCode == roleCode);

        return role != null ? role.Id : -1;

    }

    public int RegisterStudent(User newStudent, DBContextConfig context)
    {
        context.Users.Add(newStudent);
        context.SaveChanges();

        return newStudent.Id;
    }

    public void RegisterLecturer(string fullName, string email, string autogeneratedPassword, int createdBy)
    {
        const string query = "INSERT INTO t_user (fullname, email, pwd, user_role, created_by, created_at, ver, is_active) " +
                             "VALUES (@fullname, @email, @password, @userRole, @createdBy, NOW(), 1, TRUE)";

        using (var connection = new NpgsqlConnection(ConnectionDB.ConnectionString))
        {
            connection.Open();
            using (var command = new NpgsqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@fullname", fullName);
                command.Parameters.AddWithValue("@email", email);
                command.Parameters.AddWithValue("@password", autogeneratedPassword);
                command.Parameters.AddWithValue("@userRole", Constant.RoleId.LecturerRoleId);
                command.Parameters.AddWithValue("@createdBy", createdBy);


                try
                {
                    command.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during lecturer registration: {ex.Message}");
                }
            }
        }
    }

    public List<User> GetAllLecturers()
    {
        List<User> lecturers = new List<User>();
        const string query = "SELECT * FROM t_user JOIN t_role role ON role.id = t_user.user_role WHERE role.role_code = 'LCT'";

        using (NpgsqlConnection connection = new NpgsqlConnection(ConnectionDB.ConnectionString))
        {
            connection.Open();
            using (NpgsqlCommand command = new NpgsqlCommand(query, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        User lecturer = new User()
                        {
                            Id = (int)reader["id"],
                            Email = reader["email"].ToString(),
                            Password = reader["pwd"].ToString(),
                            Fullname = reader["fullname"].ToString(),
                            Role = new Role()
                            {
                                Id = (int)reader["user_role"],
                                RoleCode = reader["role_code"].ToString(),
                                RoleName = reader["role_name"].ToString()
                            }
                        };

                        lecturers.Add(lecturer);
                    }
                }
            }
        }

        return lecturers;
    }

    public List<User> GetAllUsers()
    {
        List<User> users = new List<User>();
        const string query = "SELECT t_user.*, role.id as role_id, role.role_code, role.role_name, t_user.fullname FROM t_user " +
                             "JOIN t_role role ON role.id = t_user.user_role";

        using (NpgsqlConnection connection = new NpgsqlConnection(ConnectionDB.ConnectionString))
        {
            connection.Open();
            using (NpgsqlCommand command = new NpgsqlCommand(query, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        // Map data from the database to the User object
                        User user = new User()
                        {
                            Email = (string)reader["email"],
                            Password = (string)reader["pwd"],
                            Fullname = (string)reader["fullname"],
                            Role = new Role()
                            {
                                Id = (int)reader["role_id"],
                                RoleCode = (string)reader["role_code"],
                                RoleName = (string)reader["role_name"]
                            }
                        };

                        users.Add(user);
                    }
                }
            }
        }

        return users;
    }
}


//public void AllUser()
//{
//    List<User> users = GetAllUsers();

//    Console.WriteLine("List of Users:");
//    foreach (var user in users)
//    {
//        Console.WriteLine($"Email: {user.Email}, Full Name: {user.Fullname}, Role: {user.Role.RoleName}");
//    }
//}


//public int RegisterStudent(string fullName, string email, string password)
//{
//    const string query = "INSERT INTO t_user (fullname, email, pwd, user_role, created_by, created_at, is_active) " +
//                         "VALUES (@fullname, @email, @password, @userRole, @createdBy, NOW(), TRUE) RETURNING id";

//    using (NpgsqlConnection connection = new NpgsqlConnection(ConnectionDB.ConnectionString))
//    {
//        connection.Open();
//        using (NpgsqlCommand command = new NpgsqlCommand(query, connection))
//        {
//            command.Parameters.AddWithValue("@fullname", fullName);
//            command.Parameters.AddWithValue("@email", email);
//            command.Parameters.AddWithValue("@password", password);
//            command.Parameters.AddWithValue("@userRole", Constant.RoleId.StudentRoleId);

//            object insertedId = command.ExecuteScalar();

//            return insertedId != null ? Convert.ToInt32(insertedId) : -1;
//        }
//    }
//}
